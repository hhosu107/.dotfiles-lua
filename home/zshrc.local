## PATH
export PATH="\
$HOME/.cargo/bin:\
$GOPATH/bin:\
$(ruby -r rubygems -e 'puts Gem.user_dir')/bin:\
${PATH}"

## GNU Coreutils
# alias ls='ls --color=tty'

## fzf (arch)
if [[ -f /usr/share/fzf/key-bindings.zsh ]]; then
  source /usr/share/fzf/key-bindings.zsh
fi

## neovim
alias vi=nvim
alias vim=nvim

# open multiple files in horizontal splits
# alias nvim='nvim -o'

## Fix home/end/delete
bindkey  "^[[H"   beginning-of-line
bindkey  "^[[F"   end-of-line
bindkey  "^[[3~"  delete-char

## kubectl
#if (( $+commands[kubectl] )); then
#  source <(kubectl completion zsh)
#  alias k=kubectl
#fi

## Vault autocompletion
#if (( $+commands[vault] )); then
#  autoload -U +X bashcompinit && bashcompinit
#  autoload -Uz compinit && compinit
#  complete -o nospace -C /usr/local/bin/vault vault
#fi

## AWSCLIv2
#export AWS_DEFAULT_PROFILE=blabla
#export AWS_DEFAULT_REGION=blabla
#complete -C aws_completer aws

## Cloudflare
#export CLOUDFLARE_EMAIL=simnalamburt@gmail.com
#export CLOUDFLARE_API_KEY=xxxxxxxx

## bat
#export BAT_PAGER='less -+XF -RSQc'

## Wayland
## Firefox
#export MOZ_ENABLE_WAYLAND=1
## Elementary/EFL
#export ECORE_EVAS_ENGINE=wayland_egl
#export ELM_ENGINE=wayland_egl
## SDL
#export SDL_VIDEODRIVER=wayland
## Java
#export _JAVA_AWT_WM_NONREPARENTING=1
#
## wl-clipboard
# alias pbcopy=wl-copy
# alias pbpaste=wl-paste

# clip.exe
alias pbcopy=clip.exe

## kime
export GTK_IM_MODULE='kime'
export QT_IM_MODULE='kime'
export XMODIFIERS='@im=kime'

## sway
#alias run-sway='systemd-cat -t sway sway'
#alias run-sway-gpu='WLR_DRM_DEVICES=/dev/dri/card0:/dev/dri/card1 systemd-cat -t sway sway'
#alias edit-clipboard='swappy -f <(wl-paste -t image/png) -o >(wl-copy -t image/png)'
#alias record='wf-recorder'
#alias record-part='wf-recorder -g "$(slurp)"'

## alacritty
#alias ssh='TERM=xterm-256color ssh'

## pyenv environments

# Pyenv environment variables (Needed because of GPU usages)
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
# Pyenv initialization
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init --path)"
fi

# venvs generated by pyenv (python -m venv <path> after $pyenv global <version>)
if [[ -f ~/venv/latest/bin/activate ]]; then
  source ~/venv/latest/bin/activate && nvm use node
fi

# Do not forget to activate nvm node after activating venv to recognize it in
# nvim
# Command: nvm use stable

alias activate_latest='source ~/venv/latest/bin/activate && nvm use node'
alias activate_tf='source ~/venv/tf37/bin/activate && nvm use node'
alias activate_torch='source ~/venv/torch38/bin/activate && nvm use node'
alias activate_py311='source ~/venv/py311/bin/activate && nvm use node'
alias activate_py38='source ~/ubuntu-py/bin/activate && nvm use node'

## Shorten path to Desktop
export DESKTOP=${windowsUserProfile}/Desktop

# Turn off all beeps
# unsetopt BEEP
# Turn off history beeps
unsetopt HIST_BEEP
# Turn off autocomplete beeps
unsetopt LIST_BEEP

# WSL specific settings (reference:
# https://github.com/Alex-D/dotfiles/blob/main/.zliases.zsh)
if grep --quiet microsoft /proc/version 2>/dev/null; then
  alias wslb="PowerShell.exe 'Start-Process PowerShell -Verb RunAs \"PowerShell -File \$env:USERPROFILE\\wsl2-bridge.ps1\"'"
fi


# ssh-agent as user-level systemd service, also enable ssh-agent forwarding on tmux
if ! test "$SSH_AUTH_SOCK" ; then
  if test -e "$(readlink -f $HOME/.ssh/ssh_auth_sock)" ; then
    export SSH_AUTH_SOCK="$HOME/.ssh/ssh_auth_sock"
    ~/.ssh/add_keys.sh
  elif ! test "$SSH_AUTH_SOCK" ; then
    export SSH_AUTH_SOCK="${XDG_RUNTIME_DIR}/ssh-agent.socket"
    ~/.ssh/add_keys.sh
  fi
fi


# SSH_ENV="$HOME/.ssh/agent-environment"

# https://stackoverflow.com/questions/18880024/start-ssh-agent-on-login
# function start_agent {
#     echo "Initialising new SSH agent..."
#     /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
#     echo succeeded
#     chmod 600 "${SSH_ENV}"
#     . "${SSH_ENV}" > /dev/null
#     /usr/bin/ssh-add;
# }
# 
# # Source SSH settings, if applicable
# 
# if [ -f "${SSH_ENV}" ]; then
#    . "${SSH_ENV}" > /dev/null
#    #ps ${SSH_AGENT_PID} doesn't work under cywgin
#    ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
#        start_agent;
#     }
# else
#    start_agent;
# fi

# Alias ssh to ssh -A so that connection to the remote server allows ssh-agent forwarding
alias ssh='ssh -A'
alias scp='scp -A'
alias rsync='rsync -A'

# yt-dlp shotcut
alias yt-down="yt-dlp --downloader ffmpeg --no-part"
alias yt-down-live="yt-dlp --downloader ffmpeg --no-part --live-from-start"

alias yt-down-live-winbuild="yt-dlp -S \"codec:av1\" --downloader ffmpeg --no-part --live-from-start --ffmpeg-location /bin/ffmpeg-win --cookies ~/youtube-cookie.txt "
alias yt-down-live-winbuild-subtitles="yt-dlp -S \"codec:av1\" --downloader ffmpeg --no-part --live-from-start --ffmpeg-location /bin/ffmpeg-win --cookies ~/youtube-cookie.txt --write-sub --write-auto-sub --sub-lang \"ko.*\""

alias ytarchive-down="./ytarchive --ffmpeg-path /bin/ffmpeg-win -c ~/youtube-cookie.txt"

## chzzk streamlink
# usage: chzzk-down <url> 1080p -o <output>
# Needs to be executed under the git repo https://github.com/ssogari-dev/Chzzk_Tool/tree/main
#
# 아래의 예시 명령어를 이용하면 LIVE/VOD 영상 다운로드도 가능합니다.

# Note: 사용 전 Python과 Streamlink 설치가 필요합니다.

# streamlink "https://chzzk.naver.com/live/{고유ID}" {화질} -o {내보낼 파일 명}

# Streamlink 디렉터리(%APPDATA%\Streamlink\plugins)에 해당 파이썬 파일을 저장하여 주십시오.


# metadata	Description
# {title}	Streaming Title
# {category}	Streaming Category (usu. Korean)
# {author}	Channel Name

alias chzzk-down="streamlink --http-header \"NIS_AUT=$NIS_AUT\" --http-header \"NIS_SES=$NIS_SES\""


## Renew let's encrypt cert
export lets_encrypt_renew='sudo certbot certonly --manual -d charlese.dev -d "*.charlese.dev" --preferred-challenges dns'
export certbot_renew='sudo certbot renew'
export watch_nslookup='watch nslookup -q=TXT _acme-challenge.charlese.dev'

if [[ -f ~/.zshrc.local.local ]]; then
  source ~/.zshrc.local.local
fi
