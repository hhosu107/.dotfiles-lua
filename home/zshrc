#
# zsh-sensible
#
stty stop undef

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

[[ -o interactive ]] || return

if [[ -a /proc/version ]] && grep -q Microsoft /proc/version; then
  unsetopt BG_NICE
fi

#
# Configs
#

export HISTSIZE=10000
export SAVEHIST=10000
export HISTFILE=~/.zsh_history

# keybinding
bindkey -v
export KEYTIMEOUT=1
bindkey -M vicmd "^a" beginning-of-line
bindkey -M vicmd "^e" end-of-line
bindkey '^[[H' beginning-of-line
bindkey '^[[1~' beginning-of-line
bindkey '^[[F' end-of-line
bindkey '^[[4~' end-of-line
bindkey '^[[3~' delete-char
bindkey '^[[1;5C' forward-word
bindkey '^[[1;3C' forward-word
bindkey '^[f' forward-word # for mac
bindkey '^[[1;5D' backward-word
bindkey '^[[1;3D' backward-word
bindkey '^[b' backward-word # for mac
bindkey '^[^?' vi-backward-kill-word
bindkey -r '^D'

# zsh-substring-completion
setopt complete_in_word
setopt always_to_end
export WORDCHARS=''
zmodload -i zsh/complist

zstyle ':completion:*' menu select
zstyle ':completion:*' matcher-list 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

# zsh-history-substring-search
function __zshrc_zsh_history_substring_search_bindkey {
    # lazily config bindkey
    # https://github.com/zsh-users/zsh-syntax-highlighting/issues/411#issuecomment-317077561
    bindkey '^[[A' history-substring-search-up
    bindkey '^[[B' history-substring-search-down
    bindkey '^[OA' history-substring-search-up
    bindkey '^[OB' history-substring-search-down
    bindkey -M vicmd 'k' history-substring-search-up
    bindkey -M vicmd 'j' history-substring-search-down
}

# zsh-autosuggestions
typeset -g ZSH_AUTOSUGGEST_USE_ASYNC=1
typeset -g ZSH_AUTOSUGGEST_STRATEGY=(history completion)

#
# Zinit
#
export PS1='%n@%m:%~%(!.#.$) '
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"

if [[ ! -d "$ZINIT_HOME" ]]; then
    git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
fi

### Zinit plugins
if [[ -f "${ZINIT_HOME}/zinit.zsh" ]]; then
    source "${ZINIT_HOME}/zinit.zsh"

    zinit depth=1 light-mode for romkatv/powerlevel10k

    function __zshrc_kubectl_aliases_patch {
        sed 's/alias k\(\w*\)a\(\w\?\)=/alias k\1ap\2=/g' .kubectl_aliases > .kubectl_aliases_mod
    }

    function __zshrc_pyenv_atload {
        eval "$(pyenv init --path zsh)"
        command pyenv rehash >/dev/null &!
    }

    zinit wait lucid for \
        has"pyenv" id-as"pyenv" atclone"pyenv init - --no-rehash zsh > pyenv.zsh" atpull"%atclone" run-atpull pick"pyenv.zsh" nocompile"!" atload"!__zshrc_pyenv_atload" hhosu107/zinit-null \
        if"[ -d ~/.pyenv/plugins/pyenv-virtualenv/ ]" id-as"pyenv-virtualenv" atclone"pyenv virtualenv-init - zsh > pyenv-virtualenv.zsh" atpull"%atclone" run-atpull pick"pyenv-virtualenv.zsh" nocompile"!" hhosu107/zinit-null \
        rupa/z \
        if"[ -f ~/.asdf/asdf.sh ]" id-as"asdf" pick"$HOME/.asdf/asdf.sh" nocompile hhosu107/zinit-null
        # has"fzf" id-as"fzf" multisrc"(completion|key-bindings).zsh" compile"(completion|key-bindings).zsh" svn https://github.com/junegunn/fzf/trunk/shell
        #
    #
    # fzf settings
    #

    # Easily access the directories you visit most often.
    #
    # Usage:
    #     $ z work
    #     $ <CTRL-G>work
    zinit light agkozak/zsh-z
    zinit light andrewferrier/fzf-z
    export FZFZ_SUBDIR_LIMIT=0

    # Automatically expand all aliases
    ZSH_EXPAND_ALL_DISABLE=word
    zinit wait lucid for \
        light-mode simnalamburt/zsh-expand-all

    # fzf
    zinit for \
        sbin'fzf' junegunn/fzf \
        https://github.com/junegunn/fzf/raw/master/shell/{'completion','key-bindings'}.zsh
    zinit load tirr-c/zsh-env-setup
    zinit load tirr-c/git-select-branch

    # aliases
    zinit wait lucid for \
        light-mode simnalamburt/cgitc \
        light-mode simnalamburt/ctrlf \
        light-mode ahmetb/kubectl-aliases

    # completions
    zinit wait lucid for \
        light-mode zsh-users/zsh-completions \
        light-mode MenkeTechnologies/zsh-cargo-completion \
        has"helm" id-as"helm-completion" as"completion" atclone"helm completion zsh > _helm" atpull"%atclone" run-atpull pick"_helm" hhosu107/zinit-null \
        has"poetry" id-as"poetry-completion" as"completion" atclone"poetry completions zsh > _poetry" atpull"%atclone" run-atpull pick"_poetry" hhosu107/zinit-null \
        has"uv" id-as"uv-completion" as"completion" atclone"uv generate-shell-completion zsh > _uv" atpull"%atclone" run-atpull pick"_uv" nocompile hhosu107/zinit-null \
        has"uvx" id-as"uvx-completion" as"completion" atclone"uvx generate-shell-completion zsh > _uvx" atpull"%atclone" run-atpull pick"_uvx" nocompile hhosu107/zinit-null

    #    atload"__zshrc_zsh_history_substring_search_bindkey" zsh-users/zsh-history-substring-search \
    # last group
    zinit wait lucid for \
        atload"zicompinit; zicdreplay" blockf zsh-users/zsh-autosuggestions \
        zdharma-continuum/fast-syntax-highlighting
fi
### End of Zinit plugins

#
# Etc
#


#
# zsh-sensible
#
if (( $+commands[lsd] )); then
  alias ls='lsd'
  alias l='lsd -Al --date=relative --group-dirs=first --blocks=permission,user,size,date,name'
  alias ll='lsd -l --date=relative --group-dirs=first --blocks=permission,user,size,date,name'
  alias lt='lsd --tree --depth=2 --date=relative --group-dirs=first'
else
  alias l='ls -alh'
  alias ll='ls -lh'
fi
alias rm='rm -I'
alias mv='mv -i'
alias cp='cp -i'

HISTSIZE=90000
SAVEHIST=90000
HISTFILE=~/.zsh_history

setopt auto_cd histignorealldups sharehistory
zstyle ':completion:*' menu select
zstyle ':completion:*' use-cache on
# Substring completion
zstyle ':completion:*' matcher-list 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

# Clear screen
clear_screen() { tput clear }
zle -N clear_screen
bindkey '^s' clear_screen


#
# lscolors
#
export LS_COLORS="di=1;36:ln=35:so=32:pi=33:ex=31:bd=34;46:cd=34;43:su=0;41:sg=30;46:tw=0;42:ow=30;43"
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"

export LSCOLORS="Gxfxcxdxbxegedxbagxcad"
export TIME_STYLE='long-iso'
autoload -U colors && colors


#
# zsh-substring-completion
#
setopt complete_in_word
setopt always_to_end
WORDCHARS=''
zmodload -i zsh/complist

# Find current user in Windows
export WINDOWS_CURRENT_USER=$(cmd.exe /c "echo %USERNAME%" 2>/dev/null | tr -d '\r')
export windowsUserProfile=/mnt/c/Users/${WINDOWS_CURRENT_USER}

#
# WSL support
#
if [[ -f /proc/sys/fs/binfmt_misc/WSLInterop ]]; then
  umask 022
  alias open=explorer.exe
  alias pbcopy=clip.exe
  alias pbpaste='powershell.exe Get-Clipboard | sed "s/\r$//" | head -c -1'
  alias code='${windowsUserProfile}/AppData/Local/Programs/Microsoft\ VS\ Code/code.exe'
  alias wslexit='cmd.exe /c "wsl --shutdown"'
fi


#
# zshrc
#
export DOCKER_BUILDKIT=1
export AWS_SDK_LOAD_CONFIG=true

# EDITOR이나 VISUAL 환경변수 안에 'vi' 라는 글자가 들어있으면 자동으로
# emacs-like 키바인딩들이 해제되어서, ^A ^E 등을 모조리 쓸 수 없어진다.
# 무슨짓이냐...
#
# References:
#   https://stackoverflow.com/a/43087047
#   https://github.com/zsh-users/zsh/blob/96a79938010073d14bd9db31924f7646968d2f4a/Src/Zle/zle_keymap.c#L1437-L1439
#   https://github.com/yous/dotfiles/commit/c29bf215f5a8edc6123819944e1bf3336a4a6648
if (( $+commands[vim] )); then
  export EDITOR=vim
  bindkey -e
elif (( $+commands[nvim] )); then
  export EDITOR=nvim
  bindkey -e
fi

#
# nvm
#
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
[[ $- == *i* ]] && nvm use node


# >>> command completion >>>
# autoload -U +X bashcompinit && bashcompinit
# <<< command completion <<<

# local settings
if [ -f ~/.zshrc.local ]; then
    source ~/.zshrc.local
fi

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
