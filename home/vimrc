"
" General Configs
"

scriptencoding utf-8
set encoding=utf-8
set fileencoding=utf-8
set shell=/bin/bash
set diffopt+=iwhite,vertical
set pastetoggle=<F8>
set scrolloff=3
set switchbuf+=usetab,split
set startofline
set splitbelow splitright
set lazyredraw
set nobackup
set nowritebackup
set noswapfile
if !has('nvim')
    set nocompatible
endif
set noshowmode
set nofoldenable
set nowrap
set showcmd
set updatetime=500
set termguicolors
set signcolumn=yes
set colorcolumn=79,99,119

" History
if has('persistent_undo')
    set undofile
    let &undodir = $HOME . '/.vim/undodir'
    silent! call mkdir(&undodir, 'p')
endif

" mouse
set mouse=a

" Indentation
set cindent
set autoindent
set smartindent

" Tab
autocmd FileType make setlocal noexpandtab
set softtabstop=2
set shiftwidth=2
set expandtab
autocmd BufEnter * if &filetype == "make" | setlocal noexpandtab | endif
autocmd BufEnter * if &filetype == "textproto" | setlocal noexpandtab | endif

" Searching
set incsearch
set ignorecase
set smartcase
set hlsearch | nohlsearch
set nowrapscan

" Line Number Column
set number
set cursorline
" line width limit column color
set textwidth=100
set formatoptions-=t
set colorcolumn=+1,+2,+3
" Listchars
set list
let &listchars = 'tab:> ,extends:»,precedes:«,nbsp:·,trail:·'
" Pair matching
set matchpairs+=<:>
set showmatch
" Wildmenu
set wildmode=longest,full

" Completion
set hidden
set completeopt=preview,menuone,noinsert,noselect
set shortmess+=c
if has('patch-8.1.1564')
    set signcolumn=number
elseif has('nvim') ? has('nvim-0.2') : 1
    set signcolumn=yes
endif

filetype plugin on
syntax on

"
" Key Mappings
"
let g:mapleader = ','

" Easy file save without switching IME
cabbrev ㅈ w
cabbrev ㅂ wq
cabbrev ㅈㅂ wq

" Easy command-line mode
nnoremap ; :

" Easy Home/End
inoremap <C-a> <ESC>I
inoremap <C-e> <ESC>A
nnoremap <C-a> ^
nnoremap <C-e> $
vnoremap <C-a> ^
vnoremap <C-e> $
" Easy horizontal scrolling
noremap <esc>l 3zl
noremap <esc>h 3zh
noremap <a-l> 3zl
noremap <a-h> 3zh
" Easy Delete Key
vnoremap <silent> <backspace> "_d
" Easy file save
nnoremap <silent> <C-s>      :update<CR>
inoremap <silent> <C-s> <ESC>:update<CR>
vnoremap <silent> <C-s> <ESC>:update<CR>
" Easy Indentation
vnoremap <silent> <Tab> >gv
vnoremap <silent> <S-Tab> <gv
" Easy Splitting
nnoremap <silent> <C-_> :split<CR>
nnoremap <silent> <C-\> :vertical split<CR>
" Easy resizing
nnoremap <silent> <esc>h :vertical resize -5<CR>
nnoremap <silent> <esc>j :resize -3<CR>
nnoremap <silent> <esc>k :resize +3<CR>
nnoremap <silent> <esc>l :vertical resize +5<CR>
nnoremap <silent> <a--> :split<CR>
nnoremap <silent> <a-\> :vertical split<CR>
nnoremap <silent> <a-h> :vertical resize -5<CR>
nnoremap <silent> <a-j> :resize -3<CR>
nnoremap <silent> <a-k> :resize +3<CR>
nnoremap <silent> <a-l> :vertical resize +5<CR>
" Easy Navigation
nnoremap <C-h> <C-w><C-h>
nnoremap <C-j> <C-w><C-j>
nnoremap <C-k> <C-w><C-k>
nnoremap <C-l> <C-w><C-l>
" Easy Resize
nnoremap <silent> <C-A-h> :vertical resize -2<CR>
nnoremap <silent> <C-A-j> :resize -2<CR>
nnoremap <silent> <C-A-k> :resize +2<CR>
nnoremap <silent> <C-A-l> :vertical resize +2<CR>
" Tab Navigations
nnoremap <esc>t :tabnew<CR>
nnoremap <esc>T :-tabnew<CR>
nnoremap <esc>1 1gt
nnoremap <esc>2 2gt
nnoremap <esc>3 3gt
nnoremap <esc>4 4gt
nnoremap <esc>5 5gt
nnoremap <esc>6 6gt
nnoremap <esc>7 7gt
nnoremap <esc>8 8gt
nnoremap <esc>9 9gt
nnoremap <silent> <a-t> :tabnew<CR>
nnoremap <silent> <a-T> :-tabnew<CR>
nnoremap <silent> <a-1> 1gt
nnoremap <silent> <a-2> 2gt
nnoremap <silent> <a-3> 3gt
nnoremap <silent> <a-4> 4gt
nnoremap <silent> <a-5> 5gt
nnoremap <silent> <a-6> 6gt
nnoremap <silent> <a-7> 7gt
nnoremap <silent> <a-8> 8gt
nnoremap <silent> <a-9> 9gt
" Line Moving
nnoremap <silent> <S-Up> :m-2<CR>
nnoremap <silent> <S-Down> :m+<CR>
inoremap <silent> <S-Up> <Esc>:m-2<CR>
inoremap <silent> <S-Down> <Esc>:m+<CR>
" Buffer Navigations
nnoremap <silent> <Tab><Tab> :b #<CR>
" Easy delete
inoremap <A-BS> <C-w>
" Remove highlight
nnoremap <silent> ,<Space> :noh<CR>
" Easy save
nnoremap <C-s> :w<CR>
inoremap <C-s> <ESC>:w<CR>
" Visual to search
vnoremap // "vy/\V<C-R>=escape(@v,'/\')<CR><CR>

" Easy newline insert
function! s:CustomEnter()
    if &modifiable
        normal! o
    else
        " Exception for quickfix buffer and other unmodifiable buffers.
        " See https://vi.stackexchange.com/a/3129
        execute 'normal! \<CR>'
    endif
endfunction
nnoremap <CR> :call <SID>CustomEnter()<CR>

" Easy drag select
function! s:DragSelectMode()
    if &signcolumn != 'no'
        let s:previous_scl = &signcolumn
        set signcolumn=no
        set nonumber
    else
        let &signcolumn = s:previous_scl
        set number
    endif
endfunction
nnoremap <F9> :call <SID>DragSelectMode()<CR>

"
" Commands
"

" save with sudo
if has('nvim')
    cmap w!! w suda://%
else
    cmap w!! w !sudo tee %
endif

" Mistypings
command Q :q
command Qa :qa

"
" Plugins
"

try | call plug#begin(exists('s:plug') ? s:plug : '~/.vim/plugged')
    Plug 'itchyny/lightline.vim'
    Plug 'simnalamburt/vim-mundo'
    Plug 'vim-utils/vim-interruptless'
    Plug 'junegunn/gv.vim'
    Plug 'editorconfig/editorconfig-vim'
    Plug 'easymotion/vim-easymotion'
    Plug 'airblade/vim-gitgutter'
    Plug '~/.fzf', { 'do': { -> fzf#install() } }
    Plug 'junegunn/fzf.vim'
    Plug 'vim-scripts/BufOnly.vim'
    Plug 'google/vim-searchindex'
    Plug 'kshenoy/vim-signature'
    if has('nvim')
        Plug 'lambdalisue/suda.vim'
    endif
    Plug 'skywind3000/vim-quickui'
    Plug 'APZelos/blamer.nvim'
    Plug 'AndrewRadev/splitjoin.vim'

    " The Pope
    Plug 'tpope/vim-fugitive'
    Plug 'tpope/vim-sensible'
    Plug 'tpope/vim-obsession'
    Plug 'tpope/vim-vinegar'
    Plug 'tpope/vim-commentary'

    " Visual
    Plug 'Yggdroot/indentLine'
    Plug 'ntpeters/vim-better-whitespace'
    Plug 'connorholyday/vim-snazzy'

    " Languages
    Plug 'HerringtonDarkholme/yats.vim'
    Plug 'cespare/vim-toml'
    Plug 'elzr/vim-json'
    Plug 'neoclide/jsonc.vim'
    Plug 'hashivim/vim-terraform'
    Plug 'nirum-lang/nirum.vim'
    Plug 'neovimhaskell/haskell-vim'
    Plug 'pangloss/vim-javascript'
    Plug 'jason0x43/vim-js-indent'
    Plug 'leafgarland/typescript-vim'
    Plug 'peitalin/vim-jsx-typescript'

    " Language server and Auto completion
    Plug 'liuchengxu/vista.vim'
    Plug 'prabirshrestha/vim-lsp'
    Plug 'mattn/vim-lsp-settings'
    Plug 'prabirshrestha/asyncomplete.vim'
    Plug 'prabirshrestha/asyncomplete-lsp.vim'
    Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}

call plug#end() | catch /^Vim\%((\a\+)\)\=:E117/ | endtry

"
" Plugin Configs
"

let g:python3_host_prog = '/usr/bin/python'

" Persistent history
if has('persistent_undo')
  let vimdir='$HOME/.vim'
  let &runtimepath.=','.vimdir
  let vimundodir=expand(vimdir.'/undodir')
  call system('mkdir -p '.vimundodir)

  let &undodir=vimundodir
  set undofile
endif

" indentLine
autocmd FileType markdown let g:indentLine_enabled=0
nnoremap <silent> <leader>i :IndentLinesToggle<CR>
let g:indentLine_char='▏'

" vim-better-whitespace
let g:better_whitespace_enabled=1
let g:strip_whitespace_on_save=1
let g:strip_whitespace_confirm=0

" mundo.vim
let g:mundo_right = 1
nnoremap <silent> <leader>m :MundoToggle<CR>

" theme
" colorscheme snazzy
" let g:SnazzyTransparent = 1

" lightline
let g:lightline = {}
" let g:lightline.colorscheme = 'snazzy'
let g:lightline.active = {
    \     'left': [
    \         [ 'mode', 'paste' ],
    \         [ 'filename', 'readonly' ],
    \         [ 'currentfunction' ],
    \         [ 'truncate_here' ],
    \     ],
    \     'right': [
    \         [ 'lineinfo' ],
    \         [ 'percent' ],
    \         [ 'gitbranch', 'fileformat', 'fileencoding', 'filetype' ],
    \     ],
    \ }
let g:lightline.component = {
    \     'truncate_here': '%<',
    \ }
let g:lightline.component_visible_condition = {
    \     'truncate_here': 0,
    \ }
let g:lightline.component_type = {
    \     'truncate_here': 'raw',
    \ }
let g:lightline.component_function = {
    \     'readonly': 'LightlineReadonly',
    \     'filename': 'LightlineFilename',
    \     'fileformat': 'LightlineFileformat',
    \     'fileencoding': 'LightlineFileencoding',
    \     'filetype': 'LightlineFiletype',
    \     'gitbranch': 'FugitiveHead',
    \     'currentfunction': 'NearestMethodOrFunction'
    \ }

function! LightlineReadonly()
  return &readonly && &filetype !=# 'help' ? 'RO' : ''
endfunction

function! LightlineFilename()
  let filename = expand('%:t') !=# '' ? expand('%:t') : '[No Name]'
  let modified = &modified ? ' +' : ''
  return filename . modified
endfunction

function! LightlineFileformat()
  return winwidth(0) > 90 ? &fileformat : ''
endfunction

function! LightlineFileencoding()
  return winwidth(0) > 100 ? &fileencoding : ''
endfunction

function! LightlineFiletype()
  return winwidth(0) > 80 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction

function! NearestMethodOrFunction()
  return get(b:, 'vista_nearest_method_or_function', '')
endfunction

" fzf
let g:fzf_action = {
    \     'ctrl-t': 'tab split',
    \     'ctrl-x': 'split',
    \     'ctrl-v': 'vsplit',
    \ }
command! -bang -nargs=? -complete=dir Files
    \ call fzf#vim#files(
    \     <q-args>,
    \     fzf#vim#with_preview({'options': ['--layout=reverse', '--info=inline']}),
    \     <bang>0)
command! -bang -nargs=* Rg
    \ call fzf#vim#grep(
    \     'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>),
    \     1,
    \     fzf#vim#with_preview(),
    \     <bang>0)
nnoremap <silent> <leader><Tab> :Files<CR>
nnoremap <silent> <leader><leader><Tab> :Files!<CR>
nnoremap <silent> <leader>q :Buffers<CR>
nnoremap <silent> <leader><leader>q :Buffers!<CR>
nnoremap <leader>r :Rg<space>
nnoremap <leader><leader>r :Rg!<space>

" gv
nnoremap <silent> <leader>g :GV<CR>
nnoremap <silent> <leader><leader>g :GV!<CR>

" gitgutter
nnoremap <silent> <leader>G :GitGutterToggle<CR>

" vim-obsession
nnoremap <silent> <leader>o :Obsess<CR>
nnoremap <silent> <leader>O :Obsess!<CR>

" float-preview
let g:float_preview#docked = 1

" BufOnly.vim
command! -nargs=? -complete=buffer -bang Bo
    \ :call BufOnly('<args>', '<bang>')

" vim-json
let g:vim_json_syntax_conceal = 0

" alt
function! AltCommand(path, vim_command)
  let l:alternate = system("alt " . a:path)
  if empty(l:alternate)
    echo "No alternate file for " . a:path . " exists!"
  else
    exec a:vim_command . " " . l:alternate
  endif
endfunction

nnoremap <leader>. :call AltCommand(expand('%'), ':e')<cr>

" vim-commentary
nnoremap <C-/> gcc
inoremap <C-/> <ESC>gcca

" vim-vinegar
nnoremap = <C-^>

" vista
nnoremap <leader>v :Vista!!<CR>
nnoremap <leader><leader>v :Vista finder<CR>

let g:vista_fzf_preview = ['right:50%']

" autocmd User lsp_buffer_enabled call vista#RunForNearestMethodOrFunction()
" autocmd VimEnter * call vista#RunForNearestMethodOrFunction()

" typescript.tsx
autocmd BufNewFile,BufRead *.tsx,*.jsx set filetype=typescriptreact

" blamer.nvim
let g:blamer_enabled = 1
let g:blamer_show_in_visual_modes = 0

" Filetype specific
"

autocmd BufNewFile,BufRead *.yaml.example set ft=yaml
autocmd FileType json setlocal sw=2 sts=2 et
autocmd FileType yaml setlocal sw=2 sts=2 et
autocmd FileType yaml setlocal indentkeys-=<:>
autocmd FileType yaml setlocal indentkeys-=:
autocmd Filetype sql setlocal sw=2 sts=2 et
autocmd FileType python setlocal indentkeys-=<:>
autocmd FileType python setlocal indentkeys-=:
autocmd FileType terraform nnoremap <silent> <leader>f :TerraformFmt<cr>
autocmd FileType rust setlocal matchpairs+=<:>
autocmd FileType markdown DisableStripWhitespaceOnSave
autocmd FileType scss setlocal sw=2 sts=2 et
autocmd FileType css setlocal sw=2 sts=2 et

"
" Define a 'vimrc' augroup
"
augroup vimrc
    autocmd!

    " Vim automatic reload
    autocmd FocusGained,BufEnter,CursorHold,CursorHoldI * if mode() != 'c' | checktime | endif
    autocmd FileChangedShellPost *
        \ echohl WarningMsg | echo 'File ' . expand('<afile>') . ' changed on disk. Buffer reloaded.' | echohl None
augroup END

"
" Local configs
"

if filereadable($HOME . '/.vimrc.local')
    source $HOME/.vimrc.local
endif
